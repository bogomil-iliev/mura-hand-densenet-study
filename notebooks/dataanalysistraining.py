# -*- coding: utf-8 -*-
"""DataAnalysisTraining.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cl8A0rzkjt0VsbadmC_o4KzKe0dRwjVU

**Note: the dataset can be downloaded from here: https://www.kaggle.com/datasets/bogomililiev2308/mura-hand-xray**

**1. Mounting of the google drive**
"""

from google.colab import drive
drive.mount('/content/drive/')

"""Moving to the destination folder. **NOTE: please create an ML folder on your drive, if you are trying to run this project as absolute paths were used in the code. Also, the dataset MURA-v1.1 folder needs to be unziped in the ML folder.**"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/ML/

"""**Cloning of git hub repository.**"""

!git clone https://github.com/pyaf/DenseNet-MURA-PyTorch.git

"""Checking the content of the destination folder to ensure the repository has been copied."""

!ls "/content/drive/My Drive/ML/"

!ls "/content/drive/My Drive/ML/DenseNet-MURA-PyTorch"

"""**Installing dependencies and rolling back to python 3.7, as the original project works with libraries from that version. NOTE: Please, make sure you select version 3.7 from the prompt(input the number of the 3.7 version and press Enter to confirm.**"""

!python --version

!sudo apt-get update -y
!sudo apt-get install python3.7

#change alternatives
!sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 1

!sudo update-alternatives --config python3

!python --version

!sudo apt install python3-pip

!pip install wheel
!pip install coincurve
!pip install PyTorch
!pip install TorchVision
!pip install Numpy
!pip install Pandas

"""**Data Analysis**

Import of libraries needed for DA.
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import time
import torch
from torch.utils.data import DataLoader, Dataset
from torchvision.utils import make_grid
from torchvision import transforms
from collections import defaultdict
from torchvision.datasets.folder import pil_loader
import random
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pylab
from skimage import io, transform

pd.set_option('max_colwidth', 800)

# %matplotlib inline

"""**Load Data**

There is one Category of X-rays in this subset of MURA - the Hand Subset
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/ML/

"""Creation of dataframes."""

train_df = pd.read_csv('/content/drive/My Drive/ML/DenseNet-MURA-PyTorch/MURA-v1.1/train/train_labeled_studies.csv', names=['Path', 'Label'])
valid_df = pd.read_csv('/content/drive/My Drive/ML/DenseNet-MURA-PyTorch/MURA-v1.1/valid/valid_labeled_studies.csv', names=['Path', 'Label'])

"""**Checking the DFs**"""

train_df.shape, valid_df.shape

train_df.head(3), valid_df.head(3)

"""We can see xray paths and their correspoinding labels, each radiographs has a label of 0 (normal) or 1 (abnormal)

**2. Data analysis**

In the given research paper, the MURA abnormality detection task involves classifying upper extremity radiograph studies into two categories: normal or abnormal. Each study consists of one or more images, and the desired outcome is a binary label (0 or 1) that indicates whether the study is normal or abnormal.

The model is designed to process one or more views of an upper extremity study. Using a 169-layer convolutional neural network, the model predicts the likelihood of abnormality for each view. To determine the overall probability of abnormality for the entire study, the average of the abnormality probabilities for all the images is calculated. If this overall probability exceeds 0.5, the model classifies the study as abnormal.

Therefore, the predictions are made at the study level, considering the predictions from all the views (images) within the study. This is achieved by calculating the average of the views (images) within a specific study.
"""

train_df.head(30)

"""Analysing this dataframe, we can see that images are annotated based on whether their corresponding study is positive (normal, 0) or negative (abnormal, 1)

**Plotting of random X-rays from the training and validation sets.**
"""

from IPython.display import Image
Image("/content/drive/My Drive/ML/DenseNet-MURA-PyTorch/MURA-v1.1/train/XR_HAND/patient00218/study1_positive/image1.png")

Image("/content/drive/My Drive/ML/DenseNet-MURA-PyTorch/MURA-v1.1/train/XR_HAND/patient00565/study1_negative/image2.png")

"""It is visible that images vary in resolution and dimensions"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/ML/DenseNet-MURA-PyTorch/MURA-v1.1/train/
!ls

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/ML/DenseNet-MURA-PyTorch/MURA-v1.1/train/XR_HAND
!ls

"""The train dataset has one study type - Hand, each study type has studies on patients stored in folders named like patient001, patient002 etc.."""

data_cat= ['train', 'valid']
study_types = list(os.walk('/content/drive/My Drive/ML/DenseNet-MURA-PyTorch/MURA-v1.1/train/'))[0][1] # study types, same for train and valid sets
patients_count = {}  # to store all patients count for each study type, for train and valid sets
for phase in data_cat:
    patients_count[phase] = {}
    for study_type in study_types:
        patients = list(os.walk('/content/drive/My Drive/ML/DenseNet-MURA-PyTorch/MURA-v1.1/%s/%s' %(phase, study_type)))[0][1] # patient folder names
        patients_count[phase][study_type] = len(patients)

print(study_types)
print()
print(patients_count)

"""We can see that XR_HAND has 1945 patients in the training dataset and 159 in the validation one."""

# plot the patient counts per study type

fig, ax = plt.subplots(figsize=(10, 5))
for i, phase in enumerate(data_cat):
    counts = patients_count[phase].values()
    m = max(counts)
    for i, v in enumerate(counts):
        if v==m: ax.text(i-0.1, v+3, str(v))
        else: ax.text(i-0.1, v + 20, str(v))
    x_pos = np.arange(len(study_types))
    plt.bar(x_pos, counts, alpha=0.5)
    plt.xticks(x_pos, study_types)

plt.xlabel('Study types')
plt.ylabel('Number of patients')
plt.legend(['train', 'valid'])
plt.show()
fig.savefig('/content/drive/My Drive/ML/DenseNet-MURA-PyTorch/EDA/images/pcpst.jpg', bbox_inches='tight', pad_inches=0) # name=patient count per study type

"""**Study Count**

Patients might have multiple studies.
Let's have a look at such cases, NOTE here study count = number of patients which have same number of studies.
"""

# let's find out number of studies per study_type
study_count = {} # to store study counts for each study type
for study_type in study_types:
    BASE_DIR = '/content/drive/My Drive/ML/DenseNet-MURA-PyTorch/MURA-v1.1/train/%s/' % study_type
    study_count[study_type] = defaultdict(lambda:0) # to store study count for current study_type, initialised to 0 by default
    patients = list(os.walk(BASE_DIR))[0][1] # patient folder names
    for patient in patients:
        studies = os.listdir(BASE_DIR+patient)
        study_count[study_type][len(studies)] += 1

study_count

"""XR_HAND has 1875 patients who have only one study, similarly, 67 patients have 2 studies, 3 patients have 3 studies.
Let's plot this data
"""

# plot the study count vs number of patients per study type data
fig = plt.figure(figsize=(8, 25))
for i, study_type in enumerate(study_count):
    ax = fig.add_subplot(7, 1, i+1)
    study = study_count[study_type]
    # text in the plot
    m = max(study.values())
    for i, v in enumerate(study.values()):
        if v==m: ax.text(i-0.1, v - 200, str(v))
        else: ax.text(i-0.1, v + 200, str(v))
    ax.text(i, m - 100, study_type, color='green')
    # plot the bar chart
    x_pos = np.arange(len(study))
    plt.bar(x_pos, study.values(), align='center', alpha=0.5)
    plt.xticks(x_pos,  study.keys())
    plt.xlabel('Study count')
    plt.ylabel('Number of patients')
plt.show()
fig.savefig('/content/drive/My Drive/ML/DenseNet-MURA-PyTorch/EDA/images/pcpsc.jpg', bbox_inches='tight', pad_inches=0)

"""**Number of views per study**

It is important to note that each study may contain more than one X-ray image.
"""

# let's find out number of studies per study_type
view_count = {} # to store study counts for each study type, study count = number of patients which have similar number of studies
for study_type in study_types:
    BASE_DIR = '/content/drive/My Drive/ML/DenseNet-MURA-PyTorch/MURA-v1.1/train/%s/' % study_type
    view_count[study_type] = defaultdict(lambda:0) # to store study count for current study_type, initialized to 0 by default
    patients = list(os.walk(BASE_DIR))[0][1] # patient folder names
    for patient in patients:
        studies = os.listdir(BASE_DIR + patient)
        for study in studies:
            views = os.listdir(BASE_DIR + patient + '/' + study)
            view_count[study_type][len(views)] += 1

view_count

"""XR_HAND has as many as a maximum of 5 views in 5 studies, 4 views in 60 studies, 2 views in 517, 1404 studies with 3 views and 32 studies with 1 xray in it."""

# plot the view count vs number of studies per study type data
fig = plt.figure(figsize=(10, 30))
for i, view_type in enumerate(view_count):
    ax = fig.add_subplot(7, 1, i+1)
    view = view_count[view_type]
    # text in the plot
    m = max(view.values())
    for i, v in enumerate(view.values()):
        if v==m: ax.text(i-0.1, v - 200, str(v))
        else: ax.text(i-0.1, v + 80, str(v))
    ax.text(i - 0.5, m - 80, view_type, color='green')
    # plot the bar chart
    x_pos = np.arange(len(view))
    plt.bar(x_pos, view.values(), align='center', alpha=0.5)
    plt.xticks(x_pos,  view.keys())
    plt.xlabel('Number of views')
    plt.ylabel('Number of studies')
plt.show()
fig.savefig('/content/drive/My Drive/ML/DenseNet-MURA-PyTorch/EDA/images/nsvc.jpg', bbox_inches='tight', pad_inches=0) # name=number of studies view count

"""Majority of the studies containt between 2 or 3 pictures.

**3. Training and Validation**

**Installation of torchnet library.**
"""

!pip install torchnet

"""**Initialisation of the training and validation process**. NOTE: In order for the
 process to start and run normally please ensure that you go to /usr/local/lib/python3.10/dist-packages/torch/_tensor.py and in row number 970 you append return self.numpy() to return self.cpu().numpy() . Otherwise, there will be an error thrown.




"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /usr/local/lib/python3.10/dist-packages/torch/

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/ML/DenseNet-MURA-PyTorch/
!python main.py